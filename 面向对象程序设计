类：
  类是封装对象的属性和行为的载体，反过来说具有相同属性和行为的一类实体被称为类。
  
面向对象程序设计具有三大基本特征： 封装，继承，多态

1. 类的定义与使用
  class 类名：                 类名一般使用大写字母开头
    ”类文档信息“
    类体                       类成员方法和属性等定义剧组组成
    
2. 创建类的实例
  Classname(parameterlist)
  Classname是必选参数，用于指定具体的类：parametlist是可选参数，当创建一个类时，没有创建__init__()方法，或者__init__()方法只有一个self参数时，parameterlist
  
  class Geese：
    “大雁类”
    pass
    
  wildGoose = Geese()
  print(wildGoose)
  
3. __init__()方法
  类似Java中的构造方法
  创建一个类的实体时， __init__()方法必须包含一个self参数，并且必须是第一个参数
  self参数是第一个指向实例本事的引用，用于访问类中的属性和方法。在方法调用时会自动传递实际参数self
  
4.创建实例方法并访问。该函数是一种在类的实例上操作的函数。
  和 __init__()方法一样，实例方法的第一个参数必须是self，并且必须包含一个self参数。
  def function(self, parameterlsit):
  block
  
5. 创建数据成员并访问
  类属性：可以在类的所有实体之间
        共享值
 类属性可以通过类名称或实例名称进行访问。
 
6. 可以动态的为类和对象添加属性
  例如：Geese.beak = "......" 添加类属性
  
7. 访问限制
   （1）首尾双下划线表示定义特殊方法，一般是系统定义名字
   （2）双下划线表示private（私有）类型的成员，只允许定义该方法的类本身进行访问，也不能通过类的实例进行访问，但是可以通过类的  实例名._类名__XXX 方式访问
   例子：
   class Swan:
    __neck_swan = "天鹅的脖子很长"          #定义私有属性
    
    def __init__(self):
        print(Swan.__neck_swan)           #在实例访问中访问私有属性

    swan = Swan()
    print("加入类名：", swan._Swan__neck_swan) #私有属性，可以通过“实例名._类名__xxx”方式访问  
    
    私有属性不能通过实例名称访问，会出错。
    
8. 在python中通过   @property     将一个方法转化为属性，将方法转化为属性后，可以直接通过方法名来访问方法，而不再需要添加一对小括号()。
    例子：
    class Rec:
    def __init__(self,length,width):
        self.length = length
        self.width = width
    
    def area1(self):
        return self.length * self.width

    @property
    def area2(self):
        return self.length * self.width
        
    rect = Rec(800,600)
    area = rect.area1()
    print(area)
    area1 = rect.area2
    print(area1)
    
    使用  @property 转化后的属性不能重新赋值。
    （1）创建类属性或者方法，实例是可以在类体外进行修改的。
    （2）想要控制在类体外不要被修改，可将其设置为私有的，但设置为私有的后，在类体外也不能直接通过实例访+属性名获取值了。
    （3）想创建一个可以读但是不能修改的属性，可以使用@property

9. 有关getter 和 setter
    https://www.jb51.net/article/183846.htm
  
10. 继承
    在python 中 在类定义语句中， 类名右侧使用一对小括号将要继承的基类名称括起来，从而实现类的继承。
    class Classname（baseclasslist）
    “类的帮助与描述信息”
    statement
    
    （baseclasslist）用于指定要继承的类，可以有多个，类名之间用逗号 “，”分隔。如果不指定，是所有对象的基类Objects

  
    要让派生类调用基类的__init__()方法进行必要的初始化，需要在派生类使用super()函数调用基类的__init__()方法。 P200
    
    例子：
    class Fruit:
    def __init__(self, color = "绿色"):
        Fruit.color = color
    def harvest(self, color):
        print("水果是" + self.color + "的")
        print("水果已经收获")
        print("水果原来是" + Fruit.color + "的")

    class Apple(Fruit):
      color = "红色"
      def __init__(self):
          print("我是苹果")
         super().__init__()

    class Orange(Fruit):
       def __init__(self, color):
         super().__init__(color)
       def harvest(self, color):
          print("橙子是" + color + "的")
          print("水果已经收获")
          print("橙子原来是" + Fruit.color + "的")

    apple = Apple()
    apple.harvest(apple.color)
print("\n")
orange = Orange("不知道啥颜色")
orange.harvest("黄色")
